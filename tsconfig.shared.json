{
  "compilerOptions": {
    // shared options
    "useDefineForClassFields": true,
    "skipLibCheck": true,
    "strict": true,
    "strictNullChecks": true,
    "forceConsistentCasingInFileNames": true,
    "isolatedModules": true,
    "noImplicitAny": true,
    "noImplicitOverride": true,
    "noImplicitThis": true,
    "allowUnreachableCode": false,
    "allowUnusedLabels": false,
    "alwaysStrict": true,
    "exactOptionalPropertyTypes": false,
    "strictPropertyInitialization": false, // "When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor." , I've disabled this so that we can initialize fields AFTER constructing the object
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noPropertyAccessFromIndexSignature": true,

    /**
     * Language and Environment
     * Since decorators do not exist in JavaScript (stage 3 proposal, https://github.com/tc39/proposal-decorators)
     *  we need to enable them explicitly.
     * Here we enable decorators to be used by TypeORM.
     * If we migrate to a different ORM that does not use decorators, disable them.
     */
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
  }
}